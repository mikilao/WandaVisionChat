{"version":3,"sources":["components/MessageForm.jsx","components/TheirMessage.jsx","components/MyMessage.jsx","swordimg.png","components/ChatFeed.jsx","components/Loginpage.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","bind","SendOutlined","TheirMessage","lastMessage","message","isFirstMessageByUser","sender","username","backgroundImage","avatar","attachments","src","file","alt","marginLeft","float","backgroundColor","MyMessage","marginRight","color","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","swordimg","keys","Object","key","lastMessageKey","width","renderMessages","height","LoginForm","setUsername","password","setPassword","error","setError","e","a","authObj","axios","get","headers","localStorage","setItem","window","location","reload","align","classname","padding","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03ec24a8.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\r\nimport { sendMessage, isTyping } from 'react-chat-engine';\r\n\r\nconst MessageForm = (props) => {\r\n  const [value, setValue] = useState('');\r\n  const { chatId, creds } = props;\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n\r\n    isTyping(props, chatId);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const text = value.trim();\r\n\r\n    if (text.length > 0) {\r\n      sendMessage(creds, chatId, { text });\r\n    }\r\n\r\n    setValue('');\r\n  };\r\n\r\n  const handleUpload = (event) => {\r\n    sendMessage(creds, chatId, { files: event.target.files, text: '' });\r\n  };\r\n\r\n  return (\r\n    <form className=\"message-form\" onSubmit={handleSubmit}>\r\n      <input\r\n        className=\"message-input\"\r\n        placeholder=\"Send a message...\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        onSubmit={handleSubmit}\r\n      />\r\n      <label htmlFor=\"upload-button\">\r\n        <span className=\"image-button\">\r\n          <PictureOutlined className=\"picture-icon\" />\r\n        </span>\r\n      </label>\r\n      <input\r\n        type=\"file\"\r\n        multiple={false}\r\n        id=\"upload-button\"\r\n        style={{ display: 'none' }}\r\n        onChange={handleUpload.bind(this)}\r\n      />\r\n      <button type=\"submit\" className=\"send-button\">\r\n        <SendOutlined className=\"send-icon\" />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MessageForm;","const TheirMessage = ({ lastMessage, message }) => {\r\n  const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n\r\n  return (\r\n    <div className=\"message-row\">\r\n      {isFirstMessageByUser && (\r\n        <div\r\n          className=\"message-avatar\"\r\n          style={{ backgroundImage: message.sender && `url(${message.sender.avatar})` }}\r\n        />\r\n      )}\r\n      {message.attachments && message.attachments.length > 0\r\n        ? (\r\n          <img\r\n            src={message.attachments[0].file}\r\n            alt=\"message-attachment\"\r\n            className=\"message-image\"\r\n            style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\r\n          />\r\n        )\r\n        : (\r\n          <div className=\"message\" style={{ float: 'left', backgroundColor: '#CABCDC', marginLeft: isFirstMessageByUser ? '4px' : '48px' }}>\r\n            {message.text}\r\n          </div>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TheirMessage;","const MyMessage = ({ message }) => {\r\n    if (message.attachments && message.attachments.length > 0) {\r\n      return (\r\n        <img\r\n          src={message.attachments[0].file}\r\n          alt=\"message-attachment\"\r\n          className=\"message-image\"\r\n          style={{ float: 'right' }}\r\n        />\r\n      );\r\n    }\r\n  \r\n    return (\r\n      <div className=\"message\" style={{ float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50' }}>\r\n        {message.text}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default MyMessage;","export default __webpack_public_path__ + \"static/media/swordimg.464e667d.png\";"," import MessageForm from './MessageForm';\r\n import TheirMessage from './TheirMessage';\r\n import MyMessage from './MyMessage'; \r\n import swordimg from '../swordimg.png';\r\n\r\n const ChatFeed =(props) => {\r\n   //destructuring the props\r\n       const {chats, activeChat, userName, messages } = props;\r\n// to find the current chat\r\n       const chat = chats && chats[activeChat];\r\n       //fetch the current messages\r\n       const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && (// renders only the people who read it\r\n        <div\r\n        key={`read_${index}`}\r\n        className=\"read-receipt\"\r\n        style={{\r\n          float: isMyMessage ? 'right' : 'left',\r\n          backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\r\n        }}\r\n      />\r\n    ));\r\n\r\n\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages);\r\n    \r\n        return keys.map((key, index) => {\r\n          const message = messages[key];\r\n          const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n          const isMyMessage = userName === message.sender.username;\r\n    \r\n          return (\r\n            <div key={`msg_${index}`} style={{ width: '100%' }}>\r\n              <div className=\"message-block\">\r\n                {isMyMessage\r\n                  ? <MyMessage message={message} />\r\n                  : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />}\r\n              </div>\r\n              <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\r\n            {renderReadReceipts(message, isMyMessage)}\r\n          </div>\r\n            </div>\r\n          );\r\n        });\r\n      };\r\n\r\nif(!chat) return 'Loading...'\r\n     return(\r\n         <div className=\"chat-feed\">\r\n             <div className=\"chat-title-container\">\r\n                 <div className=\"chat-title\">\r\n                     {chat?.title}\r\n                 </div>\r\n                 <div>\r\n                    <img  className=\"sword-img\" src={swordimg} />\r\n                 </div>\r\n                 <div className=\"chat-subtitle\">\r\n                     {chat.people.map((person) => `${person.person.username}`)}\r\n                 </div>\r\n             </div>\r\n             {renderMessages()}\r\n             <div style={{height:'100px'}} />\r\n             <div className='message-form-container'>\r\n                 <MessageForm {...props} chatId={activeChat}/>\r\n             </div>\r\n         </div>\r\n     );\r\n }\r\n export  default ChatFeed;","import  {useState}  from \"react\"\r\n\r\nimport axios from 'axios';\r\n\r\nconst projectId= '2212251f-c64d-4bd2-b79c-5f79744f60d5'\r\nconst LoginForm = ( )=>{\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] =useState('');\r\n\r\n    const handleSubmit = async (e) => { // copied from messageform\r\n        e.preventDefault();\r\n        const authObj ={ \r\n            \"Project-ID\": projectId, \r\n            \"User-Name\": username,\r\n        \"User-Secret\": password\r\n    }; try{ //dont forget the async keyword above\r\n        await axios.get('https://api.chatengine.io/chats', {headers: authObj});\r\n       //if successful login, info gets saved\r\n        localStorage.setItem('username', username);\r\n        localStorage.setItem('password' , password);\r\n\r\n        window.location.reload();\r\n    }\r\n    catch(error){\r\n         setError('Incorrect, Try Again!')\r\n    }\r\n}\r\n    return(\r\n        <div className=\"wrapper\">\r\n            <div className=\"form\">\r\n                <h1 className='title'>Chat application</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type='text' value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" />\r\n                    <input type='text' value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" />\r\n                       <div align=\"center\">\r\n                           <button type=\"submit\" classname=\"button\" style={{padding:\"20px\"}}>\r\n                           <span>Start Chatting</span>\r\n                           </button>\r\n                       </div>\r\n                       <h2 className=\"error\">{error}</h2>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default LoginForm;","import {ChatEngine} from 'react-chat-engine';\r\nimport ChatFeed from \"./components/ChatFeed\";\r\nimport LoginForm from './components/Loginpage'\r\nimport './App.css';\r\n\r\nconst projectId = '2212251f-c64d-4bd2-b79c-5f79744f60d5';\r\nconst App = () => {\r\n    if(!localStorage.getItem('username')) return <LoginForm />\r\n    return (\r\n        <ChatEngine \r\n            height=\"100vh\"\r\n            projectID={projectId}\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps}/>}//use the spread operator\r\n        />\r\n    )\r\n} \r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root') );"],"sourceRoot":""}