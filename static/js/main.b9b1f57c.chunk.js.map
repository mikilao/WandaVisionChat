{"version":3,"sources":["components/MessageForm.jsx","components/TheirMessage.jsx","components/MyMessage.jsx","components/ChatFeed.jsx","App.js","index.js"],"names":["MessageForm","TheirMessage","lastMessage","message","isFirstMessageByUser","sender","username","className","style","backgroundImage","avatar","attachments","length","src","attachement","file","alt","marginLeft","float","backgroundColor","text","MyMessage","marginRight","color","ChatFeed","props","chats","activeChat","userName","messages","chat","title","people","map","person","keys","Object","key","index","lastMessageKey","isMyMessage","width","renderMessages","height","chatID","App","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"gLAQgBA,EARI,WAEhB,OACI,4CC2BQC,EA9BK,SAACC,EAAaC,GAAW,IAAD,IACvCC,GAAuBF,GAAgBA,EAAYG,OAAOC,WAC/DH,EAAQE,OAAOC,SACX,OACG,sBAAKC,UAAU,cAAf,UACIH,GACG,qBACAG,UAAU,iBACVC,MAAO,CAACC,gBAAgB,OAAD,cAAQN,QAAR,IAAQA,GAAR,UAAQA,EAASE,cAAjB,aAAQ,EAAiBK,OAAzB,SAInB,OAAPP,QAAO,IAAPA,GAAA,UAAAA,EAASQ,mBAAT,eAAsBC,QAAQ,EAElC,qBACAC,IAAKV,EAAQW,YAAY,GAAGC,KAC5BC,IAAI,qBACJT,UAAU,gBACVC,MAAO,CAACS,WAAWb,EAAuB,MAAQ,UAIlD,qBAAKG,UAAU,UAAUC,MAAO,CAACU,MAAO,OAAQD,WAAWb,EAAuB,MAAQ,OAAQe,gBAAiB,WAAnH,SACShB,EAAQiB,WCJTC,EAnBE,SAAC,GAAa,IAAD,EAAXlB,EAAW,EAAXA,QACpB,OAAU,OAAPA,QAAO,IAAPA,GAAA,UAAAA,EAASQ,mBAAT,eAAsBC,QAAQ,EAEzB,qBACAC,IAAKV,EAAQW,YAAY,GAAGC,KAC5BC,IAAI,qBACJT,UAAU,gBACVC,MAAO,CAACU,MAAO,WAOf,qBAAKX,UAAU,UAAUC,MAAO,CAACU,MAAO,QAASI,YAAY,OAAQC,MAAO,QAASJ,gBAAiB,WAAtG,SACIhB,EAAQiB,QCsCHI,EAjDA,SAACC,GAAU,IAEdC,EAA0CD,EAA1CC,MAAOC,EAAmCF,EAAnCE,WAAYC,EAAuBH,EAAvBG,SAAUC,EAAaJ,EAAbI,SAE9BC,EAAOJ,GAASA,EAAMC,GA0BnC,OAAIG,EAEK,sBAAKvB,UAAU,YAAf,UACI,sBAAKA,UAAU,uBAAf,UACI,qBAAKA,UAAU,aAAf,gBACKuB,QADL,IACKA,OADL,EACKA,EAAMC,QAEX,qBAAKxB,UAAU,gBAAf,SACKuB,EAAKE,OAAOC,KAAI,SAACC,GAAD,gBAAeA,EAAOA,OAAO5B,kBAhCrC,WACnB,IAAM6B,EAAOC,OAAOD,KAAKN,GAEzB,OAAOM,EAAKF,KAAI,SAACI,EAAKC,GAClB,IAAMnC,EAAU0B,EAASQ,GACnBE,EAA2B,IAAVD,EAAc,KAAMH,EAAKG,EAAO,GACjDE,EAAcZ,IAAazB,EAAQE,OAAOC,SAEhD,OACI,sBAA0BE,MAAO,CAACiC,MAAO,QAAzC,UACK,qBAAKlC,UAAU,gBAAf,SAEQiC,EAAc,cAAC,EAAD,CAAWrC,QAASA,IAChC,cAAC,EAAD,CAAcA,QAASA,EAASD,YAAa2B,EAASU,OAGhE,qBAAKhC,UAAU,gBAAgBC,MAAO,CAACc,YAAakB,EAAc,OAAS,MAAOvB,WAAYuB,EAAc,MAAO,QAAnH,oBAPL,cAAiBF,OA0BtBI,GACD,qBAAKlC,MAAO,CAACmC,OAAO,WACpB,qBAAKpC,UAAU,yBAAf,SACI,cAAC,EAAD,2BAAiBkB,GAAjB,IAAwBmB,OAAQjB,UAdhC,cCnBFkB,G,MAXH,WACR,OACI,cAAC,IAAD,CACIF,OAAO,QACPG,UAAU,uCACVlB,SAAS,YACTmB,WAAW,QACXC,eAAgB,SAACC,GAAD,OAAkB,cAAC,EAAD,eAAcA,SCN5DC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b9b1f57c.chunk.js","sourcesContent":["const MessageForm = ()=>{\r\n\r\n    return(\r\n        <div>\r\n           messages\r\n        </div>\r\n    );\r\n};\r\nexport  default MessageForm;","const TheirMessage = (lastMessage, message)=>{\r\nconst isFirstMessageByUser =!lastMessage  || lastMessage.sender.username !==\r\n message.sender.username;\r\n     return(\r\n        <div className=\"message-row\">\r\n           {isFirstMessageByUser && (\r\n               <div\r\n               className=\"message-avatar\"\r\n               style={{backgroundImage:`url(${message?.sender?.avatar})`}\r\n            }\r\n               />\r\n           )}\r\n           {message?.attachments?.length >0 //checking if message is an img\r\n    ?(\r\n        <img \r\n        src={message.attachement[0].file}\r\n        alt=\"message.attachment\"\r\n        className=\"message-image\"\r\n        style={{marginLeft:isFirstMessageByUser ? '4ps' : '48px' }}\r\n            />\r\n        \r\n    ) :(// same as myMessage but as a ternary operator\r\n        <div className=\"message\" style={{float: 'left', marginLeft:isFirstMessageByUser ? '4ps' : '48px', backgroundColor: \"#CABCdc\" }}>\r\n                {message.text}\r\n     </div>\r\n     )\r\n}\r\n        </div>\r\n    );\r\n};\r\nexport  default TheirMessage;","const MyMessage = ({message})=>{\r\nif(message?.attachments?.length >0){ //checking if message is an img\r\n    return(\r\n        <img \r\n        src={message.attachement[0].file}\r\n        alt=\"message.attachment\"\r\n        className=\"message-image\"\r\n        style={{float: 'right'}}\r\n            />\r\n        \r\n    )\r\n        }\r\n    return(\r\n        \r\n        <div className=\"message\" style={{float: 'right', marginRight:\"18px\", color: \"white\", backgroundColor: \"#2347d3\" }}>\r\n           {message.text}\r\n        </div>\r\n    );\r\n};\r\nexport  default MyMessage;"," import MessageForm from './MessageForm';\r\n import TheirMessage from './TheirMessage';\r\n import MyMessage from './MyMessage';\r\n\r\n const ChatFeed =(props) => {\r\n   //destructuring the props\r\n       const {chats, activeChat, userName, messages } = props;\r\n// to find the current chat\r\n       const chat = chats && chats[activeChat];\r\n       //fetch the current messages\r\n       const renderMessages = () => {\r\n           const keys = Object.keys(messages);\r\n        //keys are the id's of each message\r\n           return keys.map((key, index) =>{\r\n               const message = messages[key];\r\n               const lastMessageKey = index === 0 ? null :keys[index -1]; //was this the last message\r\n               const isMyMessage = userName === message.sender.username;\r\n\r\n               return(\r\n                   <div key={`msg_${index}`} style={{width: '100%'}}>\r\n                        <div className=\"message-block\">\r\n                            { //using a ternary statement to divide comments by user. \r\n                                isMyMessage ? <MyMessage message={message} />// called as a component\r\n                                : <TheirMessage message={message} lastMessage={messages[lastMessageKey]}/>\r\n                            }\r\n                        </div>\r\n                        <div className=\"read-reciepts\" style={{marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px': \"68px\"}}>\r\n                            read\r\n                        </div>\r\n                   </div>\r\n               )\r\n           })\r\n       }\r\n\r\nif(!chat) return 'Loading...'\r\n     return(\r\n         <div className=\"chat-feed\">\r\n             <div className=\"chat-title-container\">\r\n                 <div className=\"chat-title\">\r\n                     {chat?.title}\r\n                 </div>\r\n                 <div className=\"chat-subtitle\">\r\n                     {chat.people.map((person) => `${person.person.username}`)}\r\n                 </div>\r\n             </div>\r\n             {renderMessages()}\r\n             <div style={{height:'100px'}} />\r\n             <div className='message-form-container'>\r\n                 <MessageForm {...props} chatID={activeChat}/>\r\n             </div>\r\n         </div>\r\n     );\r\n }\r\n export  default ChatFeed;","import {ChatEngine} from 'react-chat-engine';\r\nimport ChatFeed from \"./components/ChatFeed\";\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n    return (\r\n        <ChatEngine \r\n            height=\"100vh\"\r\n            projectID=\"2212251f-c64d-4bd2-b79c-5f79744f60d5\"\r\n            userName=\"MrsVision\"\r\n            userSecret=\"wanda\"\r\n            renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps}/>}//use the spread operator\r\n        />\r\n    )\r\n} \r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root') );"],"sourceRoot":""}